{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/macuser/tomato-timer/client/src/components/Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nfunction LinearProgressWithLabel(props) {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      width: \"60%\",\n      mr: 1,\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      minWidth: 35,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: `${Math.round(props.value)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_c = LinearProgressWithLabel;\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired\n};\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  }\n});\nexport default function Timer() {\n  _s();\n\n  const initial = 0;\n  const classes = useStyles();\n  const [progress, setProgress] = React.useState(initial);\n\n  const start = () => {};\n\n  const tick = a => {\n    // let t = setInterval(() => {\n    //   setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 1));\n    // }, 1000); \n    // if (!a){\n    //   clearInterval(t);\n    //   t = 0\n    // }\n    let timerId = setInterval(() => setProgress(prevProgress => prevProgress >= 100 ? 10 : prevProgress + 1), 2000); // остановить вывод через 5 секунд\n\n    setTimeout(() => {\n      clearInterval(timerId);\n    }, 5000); // const a = setInterval(() => {\n    //       setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 1));\n    //     }, 1000);\n  };\n\n  const stop = () => {\n    tick(0);\n  }; // React.useEffect(() => {\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(LinearProgressWithLabel, {\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => tick(1),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        style: {\n          \"backgroundColor\": \"yellow\"\n        },\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: () => stop(),\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"VQ4x6+L/nCWhIav1ZF8DvRW/2tc=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = Timer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LinearProgressWithLabel\");\n$RefreshReg$(_c2, \"Timer\");","map":{"version":3,"sources":["/Users/macuser/tomato-timer/client/src/components/Timer.jsx"],"names":["React","PropTypes","makeStyles","LinearProgress","Typography","Box","Button","LinearProgressWithLabel","props","Math","round","value","propTypes","number","isRequired","useStyles","root","width","Timer","initial","classes","progress","setProgress","useState","start","tick","a","timerId","setInterval","prevProgress","setTimeout","clearInterval","stop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Box width=\"60%\" mr={1}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography variant=\"body2\" >{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n});\n\nexport default function Timer() {\n  const initial = 0\n  const classes = useStyles();\n  const [progress, setProgress] = React.useState(initial);\n\n  const start = () => {\n    \n  }\n  const tick = (a) => {\n    // let t = setInterval(() => {\n    //   setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 1));\n    // }, 1000); \n    // if (!a){\n    //   clearInterval(t);\n    //   t = 0\n    // }\n\n    let timerId = setInterval(() => setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 1)), 2000);\n\n// остановить вывод через 5 секунд\nsetTimeout(() => { clearInterval(timerId); }, 5000);\n    // const a = setInterval(() => {\n    //       setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 1));\n    //     }, 1000);\n  }\n  const stop = () => {\n    tick(0);\n  }\n\n\n  // React.useEffect(() => {\n  \n  // }, []);\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <LinearProgressWithLabel value={progress} />\n      </div>\n      <div>\n        <Button \n          variant=\"contained\"  \n          color=\"primary\"\n          onClick={() => tick(1)}\n          >\n          Start\n        </Button>\n        <Button variant=\"contained\" style={{\"backgroundColor\": \"yellow\"}}>\n          Pause\n        </Button>\n        <Button \n          variant=\"contained\" \n          color=\"secondary\"\n          onClick={() => stop()}\n          >\n          Stop\n        </Button>\n      </div>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}